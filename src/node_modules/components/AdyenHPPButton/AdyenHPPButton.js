import React from 'react'
import PropTypes from 'prop-types'
import Base64 from 'crypto-js/enc-base64'
import Hex from 'crypto-js/enc-hex'
import HMAC256 from 'crypto-js/hmac-sha256'

function calculateMerchantSignature(hmacKey, data) {
  const _encrypt = (message) => Base64.stringify(HMAC256(message, Hex.parse(hmacKey)))
  const _escape = (word) => word.replace(/\\/g, '\\\\').replace(/:/g, '\\:')

  const sorted = Object.keys(data).sort()
  const escapedKeys = sorted.map(_escape)
  const escapedValues = sorted.map(key => _escape(data[key]))
  const concatenated = escapedKeys.concat(escapedValues).join(':')
  return _encrypt(concatenated)
}

export function validateResponseQueryString(hmacKey, params) {
  const components = params.split('&').map(c => c.split('='))
  var data = {}
  components.forEach(l => data[l[0]] = decodeURIComponent(l[1]))
  const merchantSig = data.merchantSig
  delete data.merchantSig
  return (
    merchantSig &&
    merchantSig === calculateMerchantSignature(hmacKey, data) &&
    data.authResult === 'AUTHORISED'
  )
}

function AdyenHPPButton({hmacKey, formData, style, title, development}) {
  const merchantSig = calculateMerchantSignature(hmacKey, formData)
  return (
    <div>
      <form method='post' id='adyenForm' name='adyenForm' target='_parent' action={
        development ?
        'https://ca-test.adyen.com/ca/ca/skin/checkhmac.shtml' :
        'https://live.adyen.com/hpp/pay.shtml'
      }>
        {Object.keys(formData).map((key) => <input type='hidden' key={key} name={key} value={formData[key]}/>)}
        <input type='hidden' name='merchantSig' value={merchantSig} />
        <button style={style} type='submit'>{title}</button>
      </form>
    </div>
  )
}

AdyenHPPButton.propTypes = {
    formData: PropTypes.object.isRequired,
    hmacKey: PropTypes.string.isRequired,
    style: PropTypes.object.isRequired,
    title: PropTypes.string.isRequired,
}

export default AdyenHPPButton
